/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package eksetasi;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.time.LocalDate;
import javax.swing.JOptionPane;
import java.util.ArrayList;

/**
 *
 * @author user
 */
public class PaymentForm extends javax.swing.JFrame {

    /**
     * Creates new form PaymentForm
     */
    public PaymentForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        import_button = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        yearChooser = new com.toedter.calendar.JYearChooser();
        monthChooser = new com.toedter.calendar.JMonthChooser();
        jMenuBar1 = new javax.swing.JMenuBar();
        Select = new javax.swing.JMenu();
        Select_employees = new javax.swing.JMenuItem();
        Select_phones = new javax.swing.JMenuItem();
        Select_employeeStatus = new javax.swing.JMenuItem();
        Select_salaryHistory = new javax.swing.JMenuItem();
        Select_leaveDays = new javax.swing.JMenuItem();
        Select_sickDays = new javax.swing.JMenuItem();
        Select_unpaidAbsences = new javax.swing.JMenuItem();
        Select_workHours = new javax.swing.JMenuItem();
        Select_authorizedUsers = new javax.swing.JMenuItem();
        Insert = new javax.swing.JMenu();
        Insert_employee = new javax.swing.JMenuItem();
        Insert_employeePhones = new javax.swing.JMenuItem();
        Insert_employeeStatus = new javax.swing.JMenuItem();
        Insert_salaryHistory = new javax.swing.JMenuItem();
        Insert_leaveDays = new javax.swing.JMenuItem();
        Insert_sickDays = new javax.swing.JMenuItem();
        Insert_unpaidAbsences = new javax.swing.JMenuItem();
        Insert_workHours = new javax.swing.JMenuItem();
        Insert_authorizedUsers = new javax.swing.JMenuItem();
        Salaries = new javax.swing.JMenu();
        Payment = new javax.swing.JMenuItem();
        Salary_receipt = new javax.swing.JMenuItem();
        General_payroll = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Payment");

        import_button.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        import_button.setText("Import into Database");
        import_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                import_buttonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Year");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Month");

        Select.setText("Select");

        Select_employees.setText("Employees");
        Select_employees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Select_employeesActionPerformed(evt);
            }
        });
        Select.add(Select_employees);

        Select_phones.setText("Phones");
        Select_phones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Select_phonesActionPerformed(evt);
            }
        });
        Select.add(Select_phones);

        Select_employeeStatus.setText("Status");
        Select_employeeStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Select_employeeStatusActionPerformed(evt);
            }
        });
        Select.add(Select_employeeStatus);

        Select_salaryHistory.setText("Salary History");
        Select_salaryHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Select_salaryHistoryActionPerformed(evt);
            }
        });
        Select.add(Select_salaryHistory);

        Select_leaveDays.setText("Leave Days");
        Select_leaveDays.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Select_leaveDaysActionPerformed(evt);
            }
        });
        Select.add(Select_leaveDays);

        Select_sickDays.setText("Sick Days");
        Select_sickDays.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Select_sickDaysActionPerformed(evt);
            }
        });
        Select.add(Select_sickDays);

        Select_unpaidAbsences.setText("Absence Days");
        Select_unpaidAbsences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Select_unpaidAbsencesActionPerformed(evt);
            }
        });
        Select.add(Select_unpaidAbsences);

        Select_workHours.setText("Hours Worked");
        Select_workHours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Select_workHoursActionPerformed(evt);
            }
        });
        Select.add(Select_workHours);

        Select_authorizedUsers.setText("Authorization");
        Select_authorizedUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Select_authorizedUsersActionPerformed(evt);
            }
        });
        Select.add(Select_authorizedUsers);

        jMenuBar1.add(Select);

        Insert.setText("Insert");

        Insert_employee.setText("Employee");
        Insert_employee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insert_employeeActionPerformed(evt);
            }
        });
        Insert.add(Insert_employee);

        Insert_employeePhones.setText("Phones");
        Insert_employeePhones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insert_employeePhonesActionPerformed(evt);
            }
        });
        Insert.add(Insert_employeePhones);

        Insert_employeeStatus.setText("Status");
        Insert_employeeStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insert_employeeStatusActionPerformed(evt);
            }
        });
        Insert.add(Insert_employeeStatus);

        Insert_salaryHistory.setText("Salary History");
        Insert_salaryHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insert_salaryHistoryActionPerformed(evt);
            }
        });
        Insert.add(Insert_salaryHistory);

        Insert_leaveDays.setText("Leave Days");
        Insert_leaveDays.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insert_leaveDaysActionPerformed(evt);
            }
        });
        Insert.add(Insert_leaveDays);

        Insert_sickDays.setText("Sick Days");
        Insert_sickDays.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insert_sickDaysActionPerformed(evt);
            }
        });
        Insert.add(Insert_sickDays);

        Insert_unpaidAbsences.setText("Absence Days");
        Insert_unpaidAbsences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insert_unpaidAbsencesActionPerformed(evt);
            }
        });
        Insert.add(Insert_unpaidAbsences);

        Insert_workHours.setText("Hours Worked");
        Insert_workHours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insert_workHoursActionPerformed(evt);
            }
        });
        Insert.add(Insert_workHours);

        Insert_authorizedUsers.setText("Authorization");
        Insert_authorizedUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insert_authorizedUsersActionPerformed(evt);
            }
        });
        Insert.add(Insert_authorizedUsers);

        jMenuBar1.add(Insert);

        Salaries.setText("Salaries");

        Payment.setText("Payment");
        Salaries.add(Payment);

        Salary_receipt.setText("Salary Receipt");
        Salary_receipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Salary_receiptActionPerformed(evt);
            }
        });
        Salaries.add(Salary_receipt);

        General_payroll.setText("General Payroll");
        General_payroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                General_payrollActionPerformed(evt);
            }
        });
        Salaries.add(General_payroll);

        jMenuBar1.add(Salaries);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(import_button)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(52, 52, 52)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(159, 159, 159)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(220, 220, 220)
                        .addComponent(yearChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(117, 117, 117)
                        .addComponent(monthChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 156, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(monthChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(yearChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 175, Short.MAX_VALUE)
                .addComponent(import_button)
                .addGap(90, 90, 90))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void Select_phonesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Select_phonesActionPerformed
        // TODO add your handling code here:
        Select_employeePhonesForm f = new Select_employeePhonesForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Select_phonesActionPerformed

    private void Select_employeeStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Select_employeeStatusActionPerformed
        // TODO add your handling code here:
        Select_employeeStatusForm f = new Select_employeeStatusForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Select_employeeStatusActionPerformed

    private void Select_salaryHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Select_salaryHistoryActionPerformed
        // TODO add your handling code here:
        Select_salaryHistoryForm f = new Select_salaryHistoryForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Select_salaryHistoryActionPerformed

    private void Select_leaveDaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Select_leaveDaysActionPerformed
        // TODO add your handling code here:
        Select_leaveDaysForm f = new Select_leaveDaysForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Select_leaveDaysActionPerformed

    private void Select_sickDaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Select_sickDaysActionPerformed
        // TODO add your handling code here:
        Select_sickDaysForm f = new Select_sickDaysForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Select_sickDaysActionPerformed

    private void Select_unpaidAbsencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Select_unpaidAbsencesActionPerformed
        // TODO add your handling code here:
        Select_unpaidAbsencesForm f = new Select_unpaidAbsencesForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Select_unpaidAbsencesActionPerformed

    private void Select_workHoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Select_workHoursActionPerformed
        // TODO add your handling code here:
        Select_workHoursForm f = new Select_workHoursForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Select_workHoursActionPerformed

    private void Select_authorizedUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Select_authorizedUsersActionPerformed
        // TODO add your handling code here:
        Select_authorizationForm f = new Select_authorizationForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Select_authorizedUsersActionPerformed

    private void Insert_employeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insert_employeeActionPerformed
        // TODO add your handling code here:
        Insert_employeeForm f = new Insert_employeeForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Insert_employeeActionPerformed

    private void Insert_employeePhonesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insert_employeePhonesActionPerformed
        // TODO add your handling code here:
        Insert_employeePhonesForm f = new Insert_employeePhonesForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Insert_employeePhonesActionPerformed

    private void Insert_employeeStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insert_employeeStatusActionPerformed
        // TODO add your handling code here:
        Insert_employeeStatusForm f = new Insert_employeeStatusForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Insert_employeeStatusActionPerformed

    private void Insert_salaryHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insert_salaryHistoryActionPerformed
        // TODO add your handling code here:
        Insert_salaryHistoryForm f = new Insert_salaryHistoryForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Insert_salaryHistoryActionPerformed

    private void Insert_leaveDaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insert_leaveDaysActionPerformed
        // TODO add your handling code here:
        Insert_leaveDaysForm f = new Insert_leaveDaysForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Insert_leaveDaysActionPerformed

    private void Insert_sickDaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insert_sickDaysActionPerformed
        // TODO add your handling code here:
        Insert_sickDaysForm f = new Insert_sickDaysForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Insert_sickDaysActionPerformed

    private void Insert_unpaidAbsencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insert_unpaidAbsencesActionPerformed
        // TODO add your handling code here:
        Insert_unpaidAbsencesForm f = new Insert_unpaidAbsencesForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Insert_unpaidAbsencesActionPerformed

    private void Insert_workHoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insert_workHoursActionPerformed
        // TODO add your handling code here:
        Insert_workHoursForm f = new Insert_workHoursForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Insert_workHoursActionPerformed

    private void Insert_authorizedUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insert_authorizedUsersActionPerformed
        // TODO add your handling code here:
        Insert_authorizationForm f = new Insert_authorizationForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Insert_authorizedUsersActionPerformed

    private void import_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_import_buttonActionPerformed
        // TODO add your handling code here:
        Connection conn = null;
        ArrayList<Employee> employees = new ArrayList<>();
        int year = yearChooser.getYear();
        int month = monthChooser.getMonth() + 1;
        
        try{
            conn = DriverManager.getConnection(LoginForm.CONN_STRING, LoginForm.USERNAME, LoginForm.PASSWORD);
            String sal = "SELECT EmployeeID, SalaryType, "
                       + "(SELECT Salary FROM salaryhistory "
                       + "WHERE employees.EmployeeID = salaryhistory.EmployeeID AND salaryhistory.EffectiveDate <= ? "
                       + "ORDER BY salaryhistory.EffectiveDate DESC "
                       + "LIMIT 1) AS Salary "
                       + "FROM employees ";
            try(PreparedStatement pstmtSal = conn.prepareStatement(sal)){
                //τελευταία ημέρα του μήνα
                LocalDate lastOfMonth = LocalDate.of(year, month, 1).withDayOfMonth(
                                        LocalDate.of(year, month, 1).lengthOfMonth());
                pstmtSal.setString(1, lastOfMonth.toString());
                ResultSet rsSal = pstmtSal.executeQuery();
                while(rsSal.next()){
                    Employee emp = new Employee();
                    emp.setId(rsSal.getInt("EmployeeID"));
                    //παίρνει το είδος του εργαζομένου
                    emp.setType(rsSal.getString("SalaryType"));
                    if(!"Ωρομίσθιος".equals(emp.getType())){                                                   
                        emp.setSalary(rsSal.getDouble("Salary"));                       
                    }
                    employees.add(emp);
                }
            }
            
            String sal_history = "SELECT salaryhistory.EmployeeID, Salary, EffectiveDate from salaryhistory "
                               + "JOIN employees "
                               + "ON salaryhistory.EmployeeID = employees.EmployeeID "
                               + "WHERE employees.SalaryType = 'Ωρομίσθιος'";
            try(PreparedStatement pstmtHist = conn.prepareStatement(sal_history)){
                ResultSet rsHist = pstmtHist.executeQuery();
                while(rsHist.next()){
                    int id = rsHist.getInt("EmployeeID");
                    double rate = rsHist.getDouble("Salary");
                    String date = rsHist.getString("EffectiveDate");
                    for(Employee emp : employees){
                        if(emp.getId() == id && "Ωρομίσθιος".equals(emp.getType())){
                            emp.addHourlyRate(date, rate);
                            break;
                        }
                    }
                }
            }
            
            //παίρνει τις ώρες εργασίας των ωρομίσθιων
            String work = "SELECT workhours.EmployeeID, WorkDate, HoursWorked FROM workhours "
                            + "JOIN employees "
                            + "ON workhours.EmployeeID = employees.EmployeeID "                           
                            + "WHERE employees.SalaryType = 'Ωρομίσθιος' "
                            + "AND YEAR(WorkDate) = ? AND Month(WorkDate) = ?";                                                  
                try(PreparedStatement pstmtWork = conn.prepareStatement(work)){
                    pstmtWork.setInt(1, year);
                    pstmtWork.setInt(2, month);
                    ResultSet rsWork = pstmtWork.executeQuery();
                    while(rsWork.next()){
                        int id = rsWork.getInt("EmployeeID");
                        String date = rsWork.getString("WorkDate");
                        double hours = rsWork.getDouble("HoursWorked");
                        for(Employee emp : employees){
                            if(emp.getId() == id && "Ωρομίσθιος".equals(emp.getType())){
                                emp.addWorkHour(date, hours);
                                break;
                            }
                        }
                    }
                }
                
                //παίρνει τις ημέρες άδειας για κάθε εργαζόμενο με βάση τον χρόνο και τον μήνα που βάλαμε
                String leave = "SELECT EmployeeID, LeaveDays FROM leavedays WHERE YEAR(LeaveDate) = ? AND MONTH(LeaveDate) = ?";
                try(PreparedStatement pstmtLeave = conn.prepareStatement(leave)){
                    pstmtLeave.setInt(1, year);
                    pstmtLeave.setInt(2, month);
                    ResultSet rsLeave = pstmtLeave.executeQuery();
                    while(rsLeave.next()){
                        int id = rsLeave.getInt("EmployeeID");
                        for(Employee emp : employees){
                            //ελέγχει για το EmployeeID να είναι το ίδιο για να μην πάρει ο εργαζόμενος λάθος τιμές
                            if(emp.getId() == id){
                                emp.setLeaveDays(rsLeave.getInt("LeaveDays"));                               
                                break;
                            }
                        }                       
                    }
                }
                
                //παίρνει τις ημέρες ανάρρωσης/αρρώστιας για κάθε εργαζόμενο με βάση τον χρόνο και τον μήνα που βάλαμε
                String sick = "SELECT EmployeeID, SickDays FROM sickdays WHERE YEAR(SickDate) = ? AND MONTH(SickDate) = ?";
                try(PreparedStatement pstmtSick = conn.prepareStatement(sick)){
                    pstmtSick.setInt(1, year);
                    pstmtSick.setInt(2, month);
                    ResultSet rsSick = pstmtSick.executeQuery();
                    while(rsSick.next()){
                        int id = rsSick.getInt("EmployeeID");
                        for(Employee emp : employees){
                            //ελέγχει για το EmployeeID να είναι το ίδιο για να μην πάρει ο εργαζόμενος λάθος τιμές
                            if(emp.getId() == id){
                                emp.setSickDays(rsSick.getInt("SickDays"));                                
                                break;
                            }
                        }                       
                    }
                }
                
                //παίρνει τις ημέρες αδικαιολόγητης απουσίας για κάθε εργαζόμενο με βάση τον χρόνο και τον μήνα που βάλαμε
                String absence = "SELECT EmployeeID, AbsenceDays FROM unpaidabsences WHERE YEAR(AbsenceDate) = ? AND MONTH(AbsenceDate) = ?";
                try(PreparedStatement pstmtAbs = conn.prepareStatement(absence)){
                    pstmtAbs.setInt(1, year);
                    pstmtAbs.setInt(2, month);
                    ResultSet rsAbs = pstmtAbs.executeQuery();
                    while(rsAbs.next()){
                         int id = rsAbs.getInt("EmployeeID");
                         for(Employee emp : employees){
                             //ελέγχει για το EmployeeID να είναι το ίδιο για να μην πάρει ο εργαζόμενος λάθος τιμές
                             if(emp.getId() == id){
                                 emp.setAbsenceDays(rsAbs.getInt("AbsenceDays"));
                                 break;
                             }                               
                         }                           
                    }                        
                }
                               
                               
                //τώρα υπολογίζεται ο τελικός μισθός με βάση τις ημέρες απουσίας            
                for(Employee emp : employees){
                    if(emp.getAbsenceDays() > 0 && !"Ωρομίσθιος".equals(emp.getType())){
                       emp.calc_salary_absence();
                    }
                    //εδώ υπολογίζεται ο ωρομίσθιος
                    else if("Ωρομίσθιος".equals(emp.getType())){
                        emp.calc_hourly_salary();
                    }
                    else{
                        emp.calc_salary();
                    }
                }
            
                   
            //διαγράφει διπλές εγγραφές στον πίνακα με τις μισθοδοσίες 
            String delete = "DELETE FROM salary WHERE Year = ? AND Month = ?";
            try(PreparedStatement pstmtDel = conn.prepareStatement(delete)){              
                    pstmtDel.setInt(1, year);
                    pstmtDel.setInt(2, month);
                    pstmtDel.executeUpdate();               
            }
            
            
            //κάνει εισαγωγή των δεδομένων και του τελικού μισθού που υπολογίσαμε στον πίνακα με τις μισθοδοσίες
            String insert = "INSERT INTO salary (EmployeeID, Year, Month, Salary, LeaveDays, SickDays, AbsenceDays) " 
                          + "VALUES (?, ?, ?, ?, ?, ?, ?)";
            try(PreparedStatement pstmtIns = conn.prepareStatement(insert)){
                ArrayList<Employee> unique = new ArrayList<>();
                for(Employee emp : employees){
                boolean found = false;

                    for(Employee ex : unique){
                        if(ex.getId() == emp.getId()){
                            //Αν υπάρχει ήδη προσθέτουμε τα ποσά
                            ex.setFinalSalary(ex.getFinalSalary() + emp.getFinalSalary());
                            ex.setLeaveDays(ex.getLeaveDays() + emp.getLeaveDays());
                            ex.setSickDays(ex.getSickDays() + emp.getSickDays());
                            ex.setAbsenceDays(ex.getAbsenceDays() + emp.getAbsenceDays());
                            found = true;
                            break;
                        }
                    }

                    if(!found){
                        unique.add(emp);
                    }
                }

                // Εισαγωγή των μοναδικών μόνο
                for(Employee emp : unique){
                    pstmtIns.setInt(1, emp.getId());
                    pstmtIns.setInt(2, year);
                    pstmtIns.setInt(3, month);
                    pstmtIns.setDouble(4, emp.getFinalSalary());
                    pstmtIns.setInt(5, emp.getLeaveDays());
                    pstmtIns.setInt(6, emp.getSickDays());
                    pstmtIns.setInt(7, emp.getAbsenceDays());
                    pstmtIns.executeUpdate();
                }

                JOptionPane.showMessageDialog(null, "Επιτυχής Εξαγωγή!");
            }
            conn.close();
        }
        catch(SQLException exce){
            JOptionPane.showMessageDialog(null, exce);
        }
    }//GEN-LAST:event_import_buttonActionPerformed

    private void Salary_receiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Salary_receiptActionPerformed
        // TODO add your handling code here:
        SalaryReceiptForm f = new SalaryReceiptForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Salary_receiptActionPerformed

    private void Select_employeesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Select_employeesActionPerformed
        // TODO add your handling code here:
        Select_employeeForm f = new Select_employeeForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_Select_employeesActionPerformed

    private void General_payrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_General_payrollActionPerformed
        // TODO add your handling code here:
        GeneralPayrollForm f = new GeneralPayrollForm();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_General_payrollActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaymentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaymentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaymentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaymentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaymentForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem General_payroll;
    private javax.swing.JMenu Insert;
    private javax.swing.JMenuItem Insert_authorizedUsers;
    private javax.swing.JMenuItem Insert_employee;
    private javax.swing.JMenuItem Insert_employeePhones;
    private javax.swing.JMenuItem Insert_employeeStatus;
    private javax.swing.JMenuItem Insert_leaveDays;
    private javax.swing.JMenuItem Insert_salaryHistory;
    private javax.swing.JMenuItem Insert_sickDays;
    private javax.swing.JMenuItem Insert_unpaidAbsences;
    private javax.swing.JMenuItem Insert_workHours;
    private javax.swing.JMenuItem Payment;
    private javax.swing.JMenu Salaries;
    private javax.swing.JMenuItem Salary_receipt;
    private javax.swing.JMenu Select;
    private javax.swing.JMenuItem Select_authorizedUsers;
    private javax.swing.JMenuItem Select_employeeStatus;
    private javax.swing.JMenuItem Select_employees;
    private javax.swing.JMenuItem Select_leaveDays;
    private javax.swing.JMenuItem Select_phones;
    private javax.swing.JMenuItem Select_salaryHistory;
    private javax.swing.JMenuItem Select_sickDays;
    private javax.swing.JMenuItem Select_unpaidAbsences;
    private javax.swing.JMenuItem Select_workHours;
    private javax.swing.JButton import_button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private com.toedter.calendar.JMonthChooser monthChooser;
    private com.toedter.calendar.JYearChooser yearChooser;
    // End of variables declaration//GEN-END:variables
}
